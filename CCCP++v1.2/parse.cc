#line 2 "parse.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvs/root/flex/flex/skel.c,v 1.2 2004/05/07 00:28:17 jkh Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <iostream>
using namespace std;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 72
#define YY_END_OF_BUFFER 73
static yyconst short int yy_accept[392] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   73,   71,    1,    2,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       72,    6,   72,    5,    9,   72,    8,   12,   72,   11,
       15,   72,   14,   18,   72,   17,   21,   72,   20,   24,
       72,   23,   27,   72,   26,   35,   33,   34,   34,   35,
       32,   40,   38,   39,   39,   40,   37,   45,   43,   44,
       44,   45,   42,   50,   48,   49,   49,   50,   47,   55,

       53,   54,   54,   55,   52,   60,   58,   59,   59,   60,
       57,   65,   63,   64,   64,   65,   62,   70,   68,   69,
       70,   70,   67,   29,   30,   29,    1,    0,    3,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        5,    5,    0,    5,    5,    0,    8,    8,    0,    8,
        8,    0,   11,   11,    0,   11,   11,    0,   14,   14,
        0,   14,   14,    0,   17,   17,    0,   17,   17,    0,
       20,   20,    0,   20,   20,    0,   23,   23,    0,   23,
       23,    0,   26,   26,    0,   26,   26,   33,    0,   32,
       32,    0,   32,   32,   38,    0,   37,   37,    0,   37,

       37,   43,    0,   42,   42,    0,   42,   42,   48,    0,
       47,   47,    0,   47,   47,   53,    0,   52,   52,    0,
       52,   52,   58,    0,   57,   57,    0,   57,   57,   63,
        0,   62,   62,    0,   62,   62,   68,    0,   69,    0,
        0,   67,   67,    0,   67,   67,   29,    0,    0,    0,
        0,    0,    0,    0,   56,    0,    0,    0,    5,    5,
        8,    8,   11,   11,   14,   14,   17,   17,   20,   20,
       23,   23,   26,   26,   32,   32,   37,   37,   42,   42,
       47,   47,   52,   52,   57,   57,   62,   62,   67,   67,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   56,    0,    0,    0,    0,   19,    0,    0,    0,
        0,    0,    0,   66,    0,   36,    0,    0,    0,    0,
        0,    0,    0,   19,    0,    0,    0,    0,   61,    0,
       66,   36,    0,    0,   28,    0,    0,    0,    0,   31,
        0,    0,    0,    0,   61,    0,   51,    0,    4,   28,
        0,   10,    0,    0,   31,    0,    0,    0,    0,    0,
       51,    4,   10,    0,    7,    0,    0,    0,   25,    0,
       16,    0,    0,   22,    7,    0,    0,   25,   16,    0,
       13,   22,    0,   46,    0,   13,   46,    0,   41,   41,
        0

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    4,    1,    1,    1,    1,    1,
        1,    1,    5,    6,    7,    8,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    1,    1,    1,
       10,    1,    1,    1,    1,    1,   11,   12,   12,    1,
       13,    1,    1,    1,    1,    1,    1,   14,   15,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   16,    1,   17,   18,   19,   20,

       21,   22,   23,   24,   25,   26,    1,   27,   28,   29,
       30,   31,    1,   32,   33,   34,   35,    1,   36,   37,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[38] =
    {   0,
        1,    2,    2,    2,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[406] =
    {   0,
        0,   35,    5,   17,   26,   40,   52,   61,   69,   72,
       79,   82,   89,   92,   99,  102,  109,  112,  120,  128,
      136,  144,  152,  160,  168,  176,  184,  192,  200,  208,
      216,  224,  232,  240,  248,  251,  674,  675,  671,  675,
      669,  656,  636,  652,  633,  638,  649,    6,  648,  640,
      675,  675,    0,  255,  675,   14,  272,  675,   33,  289,
      675,   49,  306,  675,  259,  323,  675,  262,  340,  675,
      263,  357,  675,  276,  374,  675,    4,  675,  675,  279,
      391,  675,  255,  675,  675,  280,  408,  675,  272,  675,
      675,  293,  425,  675,  289,  675,  675,  296,  442,  675,

      302,  675,  675,  310,  459,  675,  310,  675,  675,  313,
      476,  675,  319,  675,  675,  327,  493,  675,  327,  675,
       12,  330,  510,    0,  675,    0,  661,  659,  675,  648,
      626,  626,  624,  640,  619,   63,  628,  625,  628,  331,
        0,   36,  643,    0,    0,  344,    0,   42,  642,    0,
        0,  347,    0,   75,  641,    0,    0,  348,    0,   85,
      640,    0,    0,  361,    0,   95,  639,    0,    0,  364,
        0,  105,  638,    0,    0,  365,    0,  298,  637,    0,
        0,  378,    0,  315,  636,    0,    0,  340,  381,    0,
      350,  635,    0,    0,  361,  382,    0,  367,  634,    0,

        0,  378,  395,    0,  384,  633,    0,    0,  395,  398,
        0,  400,  632,    0,    0,  404,  412,    0,  414,  631,
        0,    0,  412,  417,    0,  427,  630,    0,    0,  425,
      431,    0,  433,  629,    0,    0,  437,  449,  675,  452,
      450,    0,  452,  628,    0,    0,    0,  496,  607,  614,
      604,  605,  239,  123,  630,  598,  607,  610,    0,  620,
        0,  619,    0,  618,    0,  617,    0,  616,    0,  615,
        0,  614,    0,  613,    0,  612,    0,  611,    0,  610,
        0,  609,    0,  608,    0,  607,    0,  606,    0,  605,
      126,  583,  124,  575,  590,  142,  155,  587,  587,  577,

      571,  603,  583,  582,  578,  158,  599,  581,  562,  569,
      171,  574,  174,  594,  187,  593,  572,  190,  569,  564,
      575,  203,  574,  587,  572,  571,  570,  206,  583,  219,
      582,  581,  222,  235,  580,  238,  550,  560,  280,  577,
      549,  563,  434,  562,  573,  467,  572,  468,  543,  540,
      472,  539,  484,  505,  521,  474,  485,  489,  471,  501,
      504,  491,  490,  502,  488,  457,  457,  506,  473,  518,
      471,  523,  524,  470,  456,  527,  417,  423,  348,  533,
      339,  297,  534,  271,  536,   72,   60,  537,   25,    3,
      675,  547,  549,  551,  553,  555,  557,  559,  561,  563,

      565,  567,  569,  571,    0
    } ;

static yyconst short int yy_def[406] =
    {   0,
      392,  392,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  394,  394,
      395,  395,  396,  396,  397,  397,  398,  398,  399,  399,
      400,  400,  401,  401,  402,  402,  391,  391,  391,  391,
      403,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,

      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      404,  391,  391,  405,  391,  405,  391,  403,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
       54,   54,  391,   54,  142,  391,   57,   57,  391,   57,
      148,  391,   60,   60,  391,   60,  154,  391,   63,   63,
      391,   63,  160,  391,   66,   66,  391,   66,  166,  391,
       69,   69,  391,   69,  172,  391,   72,   72,  391,   72,
      178,  391,   75,   75,  391,   75,  184,  391,  391,   81,
       81,  391,   81,  191,  391,  391,   87,   87,  391,   87,

      198,  391,  391,   93,   93,  391,   93,  205,  391,  391,
       99,   99,  391,   99,  212,  391,  391,  105,  105,  391,
      105,  219,  391,  391,  111,  111,  391,  111,  226,  391,
      391,  117,  117,  391,  117,  233,  391,  404,  391,  404,
      391,  123,  123,  391,  123,  243,  405,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  142,  142,
      148,  148,  154,  154,  160,  160,  166,  166,  172,  172,
      178,  178,  184,  184,  191,  191,  198,  198,  205,  205,
      212,  212,  219,  219,  226,  226,  233,  233,  243,  243,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,

      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
        0,  391,  391,  391,  391,  391,  391,  391,  391,  391,

      391,  391,  391,  391,  391
    } ;

static yyconst short int yy_nxt[713] =
    {   0,
      247,   39,   40,   41,  390,  188,  140,   52,  141,  188,
       42,   53,   52,   54,  239,  240,   43,   44,   45,   52,
      146,   46,  147,   53,   52,   54,  390,   47,   55,  136,
       48,   49,   56,   55,   57,   50,   39,   40,   41,  152,
      137,  153,   55,  391,  259,   42,   56,   55,   57,  391,
      261,   43,   44,   45,   58,  158,   46,  159,   59,   58,
       60,  387,   47,   58,  254,   48,   49,   59,   58,   60,
       50,   61,  255,  386,   61,   62,   61,   63,   62,   61,
       63,   64,  391,  263,   64,   65,   64,   66,   65,   64,
       66,   67,  391,  265,   67,   68,   67,   69,   68,   67,

       69,   70,  391,  267,   70,   71,   70,   72,   71,   70,
       72,   73,  391,  269,   73,   74,   73,   75,   74,   73,
       75,   77,   78,   79,  254,   77,   80,  306,   81,   77,
       78,   79,  255,   77,   80,  307,   81,   83,   84,   85,
      309,   83,   86,  313,   87,   83,   84,   85,  310,   83,
       86,  314,   87,   89,   90,   91,  315,   89,   92,  306,
       93,   89,   90,   91,  316,   89,   92,  307,   93,   95,
       96,   97,  328,   95,   98,  313,   99,   95,   96,   97,
      329,   95,   98,  314,   99,  101,  102,  103,  315,  101,
      104,  334,  105,  101,  102,  103,  316,  101,  104,  335,

      105,  107,  108,  109,  339,  107,  110,  328,  111,  107,
      108,  109,  340,  107,  110,  329,  111,  113,  114,  115,
      346,  113,  116,  348,  117,  113,  114,  115,  347,  113,
      116,  349,  117,  119,  120,  121,  334,  119,  122,  351,
      123,  119,  120,  121,  335,  119,  122,  352,  123,   51,
      125,   51,   51,  125,   51,  126,  195,  300,  126,  142,
      195,  142,  143,  144,  301,  164,  145,  165,  170,  176,
      171,  177,  387,  202,  145,  145,  148,  202,  148,  149,
      150,  339,  182,  151,  183,  189,  196,  190,  197,  340,
      209,  151,  151,  154,  209,  154,  155,  156,  382,  203,

      157,  204,  210,  216,  211,  391,  271,  216,  157,  157,
      160,  223,  160,  161,  162,  223,  217,  163,  218,  224,
      230,  225,  391,  273,  230,  163,  163,  166,  237,  166,
      167,  168,  237,  231,  169,  232,  241,  140,  242,  141,
      386,  188,  169,  169,  172,  188,  172,  173,  174,  379,
      146,  175,  147,  152,  158,  153,  159,  391,  275,  175,
      175,  178,  195,  178,  179,  180,  195,  164,  181,  165,
      170,  176,  171,  177,  391,  277,  181,  181,  184,  202,
      184,  185,  186,  202,  182,  187,  183,  189,  196,  190,
      197,  391,  279,  187,  187,  191,  209,  191,  192,  193,

      209,  203,  194,  204,  210,  216,  211,  391,  281,  216,
      194,  194,  198,  223,  198,  199,  200,  223,  217,  201,
      218,  391,  283,  224,  378,  225,  230,  201,  201,  205,
      230,  205,  206,  207,  391,  285,  208,  231,  237,  232,
      391,  287,  237,  385,  208,  208,  212,  358,  212,  213,
      214,  239,  240,  215,  239,  240,  241,  375,  242,  391,
      289,  215,  215,  219,  359,  219,  220,  221,  346,  348,
      222,  382,  379,  351,  378,  377,  347,  349,  222,  222,
      226,  352,  226,  227,  228,  364,  368,  229,  376,  375,
      370,  363,  362,  365,  369,  229,  229,  233,  371,  233,

      234,  235,  373,  364,  236,  361,  372,  368,  367,  291,
      374,  365,  236,  236,  243,  369,  243,  244,  245,  370,
      292,  246,  355,  293,  380,  373,  294,  371,  383,  246,
      246,  295,  381,  374,  380,  383,  384,  388,  388,  366,
      363,  350,  381,  384,  362,  389,  389,   38,   38,   51,
       51,   76,   76,   82,   82,   88,   88,   94,   94,  100,
      100,  106,  106,  112,  112,  118,  118,  124,  124,  128,
      128,  238,  238,  361,  345,  360,  357,  356,  355,  354,
      353,  350,  332,  331,  345,  344,  343,  342,  324,  341,
      338,  337,  336,  333,  332,  331,  330,  327,  326,  325,

      324,  323,  322,  321,  302,  320,  319,  318,  317,  312,
      311,  308,  244,  234,  227,  220,  213,  206,  199,  192,
      185,  179,  173,  167,  161,  155,  149,  143,  305,  304,
      303,  302,  299,  298,  297,  296,  290,  288,  286,  284,
      282,  280,  278,  276,  274,  272,  270,  268,  266,  264,
      262,  260,  258,  257,  256,  253,  252,  251,  250,  249,
      248,  129,  127,  139,  138,  135,  134,  133,  132,  131,
      130,  129,  127,  391,   37,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,

      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391
    } ;

static yyconst short int yy_chk[713] =
    {   0,
      405,    1,    1,    1,  390,   77,   53,    3,   53,   77,
        1,    3,    3,    3,  121,  121,    1,    1,    1,    4,
       56,    1,   56,    4,    4,    4,  389,    1,    5,   48,
        1,    1,    5,    5,    5,    1,    2,    2,    2,   59,
       48,   59,    6,  142,  142,    2,    6,    6,    6,  148,
      148,    2,    2,    2,    7,   62,    2,   62,    7,    7,
        7,  387,    2,    8,  136,    2,    2,    8,    8,    8,
        2,    9,  136,  386,   10,    9,    9,    9,   10,   10,
       10,   11,  154,  154,   12,   11,   11,   11,   12,   12,
       12,   13,  160,  160,   14,   13,   13,   13,   14,   14,

       14,   15,  166,  166,   16,   15,   15,   15,   16,   16,
       16,   17,  172,  172,   18,   17,   17,   17,   18,   18,
       18,   19,   19,   19,  254,   19,   19,  291,   19,   20,
       20,   20,  254,   20,   20,  291,   20,   21,   21,   21,
      293,   21,   21,  296,   21,   22,   22,   22,  293,   22,
       22,  296,   22,   23,   23,   23,  297,   23,   23,  306,
       23,   24,   24,   24,  297,   24,   24,  306,   24,   25,
       25,   25,  311,   25,   25,  313,   25,   26,   26,   26,
      311,   26,   26,  313,   26,   27,   27,   27,  315,   27,
       27,  318,   27,   28,   28,   28,  315,   28,   28,  318,

       28,   29,   29,   29,  322,   29,   29,  328,   29,   30,
       30,   30,  322,   30,   30,  328,   30,   31,   31,   31,
      330,   31,   31,  333,   31,   32,   32,   32,  330,   32,
       32,  333,   32,   33,   33,   33,  334,   33,   33,  336,
       33,   34,   34,   34,  334,   34,   34,  336,   34,   35,
       35,   35,   36,   36,   36,   35,   83,  253,   36,   54,
       83,   54,   54,   54,  253,   65,   54,   65,   68,   71,
       68,   71,  384,   89,   54,   54,   57,   89,   57,   57,
       57,  339,   74,   57,   74,   80,   86,   80,   86,  339,
       95,   57,   57,   60,   95,   60,   60,   60,  382,   92,

       60,   92,   98,  101,   98,  178,  178,  101,   60,   60,
       63,  107,   63,   63,   63,  107,  104,   63,  104,  110,
      113,  110,  184,  184,  113,   63,   63,   66,  119,   66,
       66,   66,  119,  116,   66,  116,  122,  140,  122,  140,
      381,  188,   66,   66,   69,  188,   69,   69,   69,  379,
      146,   69,  146,  152,  158,  152,  158,  191,  191,   69,
       69,   72,  195,   72,   72,   72,  195,  164,   72,  164,
      170,  176,  170,  176,  198,  198,   72,   72,   75,  202,
       75,   75,   75,  202,  182,   75,  182,  189,  196,  189,
      196,  205,  205,   75,   75,   81,  209,   81,   81,   81,

      209,  203,   81,  203,  210,  216,  210,  212,  212,  216,
       81,   81,   87,  223,   87,   87,   87,  223,  217,   87,
      217,  219,  219,  224,  378,  224,  230,   87,   87,   93,
      230,   93,   93,   93,  226,  226,   93,  231,  237,  231,
      233,  233,  237,  377,   93,   93,   99,  343,   99,   99,
       99,  238,  238,   99,  240,  240,  241,  375,  241,  243,
      243,   99,   99,  105,  343,  105,  105,  105,  346,  348,
      105,  374,  371,  351,  369,  367,  346,  348,  105,  105,
      111,  351,  111,  111,  111,  353,  357,  111,  366,  365,
      358,  363,  362,  353,  357,  111,  111,  117,  358,  117,

      117,  117,  360,  364,  117,  361,  359,  368,  356,  248,
      360,  364,  117,  117,  123,  368,  123,  123,  123,  370,
      248,  123,  355,  248,  372,  373,  248,  370,  376,  123,
      123,  248,  372,  373,  380,  383,  376,  385,  388,  354,
      352,  350,  380,  383,  349,  385,  388,  392,  392,  393,
      393,  394,  394,  395,  395,  396,  396,  397,  397,  398,
      398,  399,  399,  400,  400,  401,  401,  402,  402,  403,
      403,  404,  404,  347,  345,  344,  342,  341,  340,  338,
      337,  335,  332,  331,  329,  327,  326,  325,  324,  323,
      321,  320,  319,  317,  316,  314,  312,  310,  309,  308,

      307,  305,  304,  303,  302,  301,  300,  299,  298,  295,
      294,  292,  290,  288,  286,  284,  282,  280,  278,  276,
      274,  272,  270,  268,  266,  264,  262,  260,  258,  257,
      256,  255,  252,  251,  250,  249,  244,  234,  227,  220,
      213,  206,  199,  192,  185,  179,  173,  167,  161,  155,
      149,  143,  139,  138,  137,  135,  134,  133,  132,  131,
      130,  128,  127,   50,   49,   47,   46,   45,   44,   43,
       42,   41,   39,   37,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,

      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "parse_pp"
#define INITIAL 0
/******* defining initial conditions ********/
#define cutoffC 1
#define maxjumpC 2
#define maxcohC 3
#define COGmax_pwC 4
#define COGmax_NC 5
#define COGNC 6
#define COGmin_NC 7
#define COGinc_NC 8
#define rangeC 9
#define baseC 10
#define which_nuclC 11
#define pulse_durC 12
#define COGwdgC 13
#define phC 14
#define COGpwC 15
#define attnC 16
#define fnameC 17

/******* other C and lex definitions *******/
#line 7 "parse_pp"
#define NOTASSIGNED -99999999
#define MAXFNAME 100
#define DEFAULTFNAME "qsim.fid"
#line 12 "parse_pp"
#include <stdio.h>
#line 15 "parse_pp"
#include <vector>
#line 18 "parse_pp"
#include <list>
#line 21 "parse_pp"
#include <string>
#line 24 "parse_pp"
using namespace std;
/******** defining variables ********/
float cutoff=NOTASSIGNED;
int maxjump=NOTASSIGNED;
int maxcoh=NOTASSIGNED;
int COGmax_pw=NOTASSIGNED;
int COGmax_N=NOTASSIGNED;
int COGN=NOTASSIGNED;
int COGmin_N=NOTASSIGNED;
int COGinc_N=NOTASSIGNED;
std::vector<int > range;
std::vector<int > base;
std::vector<int > which_nucl;
std::vector<float > pulse_dur;
std::vector<int > COGwdg;
std::list<std::vector<int> > ph;
std::list<std::vector<int> > COGpw;
std::list<std::vector<std::vector<float> > > attn;
int Nrange=NOTASSIGNED;
int Nbase=NOTASSIGNED;
int Nwhich_nucl=NOTASSIGNED;
int Npulse_dur=NOTASSIGNED;
int NCOGwdg=NOTASSIGNED;
int Nph=NOTASSIGNED;
int NCOGpw=NOTASSIGNED;
int Nattn=NOTASSIGNED;
std::vector<std::vector<float> > dummymtxfloatattn;
float dummyfloat;
std::vector<float> dummyvecfloat;
int dummyint;
std::vector<int> dummyvecint;
string fname=DEFAULTFNAME;
char c;
int linecount=1,vectcount=0;
#line 684 "parse.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 65 "parse_pp"


 /******* rules ***********/
#line 815 "parse.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 392 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 675 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 68 "parse_pp"
/* eat whitespace */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 69 "parse_pp"
linecount++;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 70 "parse_pp"
linecount++;     /* eat comments to the end of the line */
	YY_BREAK
/*********************************/
/*******  reading in vars ********/
/*********************************/
/*---- cutoff --------*/
case 4:
YY_RULE_SETUP
#line 78 "parse_pp"
{
#ifdef VERBOSE
		/*printf("reading cutoff(float)=\n");*/
#endif
                BEGIN(cutoffC);}
	YY_BREAK

case 5:
YY_RULE_SETUP
#line 84 "parse_pp"
{(void) sscanf(yytext,"%g",&cutoff);
#ifdef VERBOSE
                 printf("Read cutoff(float)=>%g<\n",cutoff);
#endif
                 BEGIN(INITIAL);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 89 "parse_pp"
{printf("Syntax error 1 at line %d!\nAborting...\n",linecount);
                 exit(1);}
	YY_BREAK

/*---- maxjump --------*/
case 7:
YY_RULE_SETUP
#line 93 "parse_pp"
{
#ifdef VERBOSE
		/*printf("reading maxjump(float)=\n");*/
#endif
                BEGIN(maxjumpC);}
	YY_BREAK

case 8:
YY_RULE_SETUP
#line 99 "parse_pp"
{(void) sscanf(yytext,"%d",&maxjump);
#ifdef VERBOSE
                 printf("Read maxjump(int)=>%d<\n",maxjump);
#endif
                 BEGIN(INITIAL);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 104 "parse_pp"
{printf("Syntax error 1 at line %d!\nAborting...\n",linecount);
                 exit(1);}
	YY_BREAK

/*---- maxcoh --------*/
case 10:
YY_RULE_SETUP
#line 108 "parse_pp"
{
#ifdef VERBOSE
		/*printf("reading maxcoh(float)=\n");*/
#endif
                BEGIN(maxcohC);}
	YY_BREAK

case 11:
YY_RULE_SETUP
#line 114 "parse_pp"
{(void) sscanf(yytext,"%d",&maxcoh);
#ifdef VERBOSE
                 printf("Read maxcoh(int)=>%d<\n",maxcoh);
#endif
                 BEGIN(INITIAL);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 119 "parse_pp"
{printf("Syntax error 1 at line %d!\nAborting...\n",linecount);
                 exit(1);}
	YY_BREAK

/*---- COGmax_pw --------*/
case 13:
YY_RULE_SETUP
#line 123 "parse_pp"
{
#ifdef VERBOSE
		/*printf("reading COGmax_pw(float)=\n");*/
#endif
                BEGIN(COGmax_pwC);}
	YY_BREAK

case 14:
YY_RULE_SETUP
#line 129 "parse_pp"
{(void) sscanf(yytext,"%d",&COGmax_pw);
#ifdef VERBOSE
                 printf("Read COGmax_pw(int)=>%d<\n",COGmax_pw);
#endif
                 BEGIN(INITIAL);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 134 "parse_pp"
{printf("Syntax error 1 at line %d!\nAborting...\n",linecount);
                 exit(1);}
	YY_BREAK

/*---- COGmax_N --------*/
case 16:
YY_RULE_SETUP
#line 138 "parse_pp"
{
#ifdef VERBOSE
		/*printf("reading COGmax_N(float)=\n");*/
#endif
                BEGIN(COGmax_NC);}
	YY_BREAK

case 17:
YY_RULE_SETUP
#line 144 "parse_pp"
{(void) sscanf(yytext,"%d",&COGmax_N);
#ifdef VERBOSE
                 printf("Read COGmax_N(int)=>%d<\n",COGmax_N);
#endif
                 BEGIN(INITIAL);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 149 "parse_pp"
{printf("Syntax error 1 at line %d!\nAborting...\n",linecount);
                 exit(1);}
	YY_BREAK

/*---- COGN --------*/
case 19:
YY_RULE_SETUP
#line 153 "parse_pp"
{
#ifdef VERBOSE
		/*printf("reading COGN(float)=\n");*/
#endif
                BEGIN(COGNC);}
	YY_BREAK

case 20:
YY_RULE_SETUP
#line 159 "parse_pp"
{(void) sscanf(yytext,"%d",&COGN);
#ifdef VERBOSE
                 printf("Read COGN(int)=>%d<\n",COGN);
#endif
                 BEGIN(INITIAL);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 164 "parse_pp"
{printf("Syntax error 1 at line %d!\nAborting...\n",linecount);
                 exit(1);}
	YY_BREAK

/*---- COGmin_N --------*/
case 22:
YY_RULE_SETUP
#line 168 "parse_pp"
{
#ifdef VERBOSE
		/*printf("reading COGmin_N(float)=\n");*/
#endif
                BEGIN(COGmin_NC);}
	YY_BREAK

case 23:
YY_RULE_SETUP
#line 174 "parse_pp"
{(void) sscanf(yytext,"%d",&COGmin_N);
#ifdef VERBOSE
                 printf("Read COGmin_N(int)=>%d<\n",COGmin_N);
#endif
                 BEGIN(INITIAL);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 179 "parse_pp"
{printf("Syntax error 1 at line %d!\nAborting...\n",linecount);
                 exit(1);}
	YY_BREAK

/*---- COGinc_N --------*/
case 25:
YY_RULE_SETUP
#line 183 "parse_pp"
{
#ifdef VERBOSE
		/*printf("reading COGinc_N(float)=\n");*/
#endif
                BEGIN(COGinc_NC);}
	YY_BREAK

case 26:
YY_RULE_SETUP
#line 189 "parse_pp"
{(void) sscanf(yytext,"%d",&COGinc_N);
#ifdef VERBOSE
                 printf("Read COGinc_N(int)=>%d<\n",COGinc_N);
#endif
                 BEGIN(INITIAL);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 194 "parse_pp"
{printf("Syntax error 1 at line %d!\nAborting...\n",linecount);
                 exit(1);}
	YY_BREAK

/*---- fname --------*/
case 28:
YY_RULE_SETUP
#line 198 "parse_pp"
{/* printf("reading fname(string)=\n"); */
                BEGIN(fnameC);}
	YY_BREAK

case 29:
YY_RULE_SETUP
#line 201 "parse_pp"
{    fname.append(yytext);
#ifdef VERBOSE
                 cout << "Read fname(string)=" << fname << endl;
#endif
                 BEGIN(INITIAL);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 206 "parse_pp"
{printf("Syntax error 1 at line %d!\nAborting...\n",linecount);
                 exit(1);}
	YY_BREAK

/*********************************/
/*******  reading in vectors ********/
/*********************************/
/*---- range --------*/
case 31:
YY_RULE_SETUP
#line 216 "parse_pp"
{
#ifdef VERBOSE
		printf("reading vect: range(int)=");
#endif
                vectcount=0;
                range.clear();
                BEGIN(rangeC);}
	YY_BREAK

case 32:
YY_RULE_SETUP
#line 224 "parse_pp"
{
                 (void) sscanf(yytext,"%d",&dummyint);
                 range.push_back(dummyint);
#ifdef VERBOSE
                 printf(" >%d<",range[vectcount]);
#endif
                 vectcount++;
                 BEGIN(rangeC);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 233 "parse_pp"
/* eat up whitespace */
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 235 "parse_pp"
{
#ifdef VERBOSE
		  printf("\n");
#endif
		  if(*yytext=='#') while((c=yyinput())!='\n' && c!=EOF);
                  linecount++;
	          BEGIN(rangeC);
                }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 244 "parse_pp"
{
                  yyless(0);
	          Nrange=vectcount;
                  BEGIN(INITIAL);
                  //   printf("Syntax error 1 at line %d!\nAborting...\n",linecount);
                  //   exit(1);/* error in var assignment */
		}
	YY_BREAK

/*---- base --------*/
case 36:
YY_RULE_SETUP
#line 253 "parse_pp"
{
#ifdef VERBOSE
		printf("reading vect: base(int)=");
#endif
                vectcount=0;
                base.clear();
                BEGIN(baseC);}
	YY_BREAK

case 37:
YY_RULE_SETUP
#line 261 "parse_pp"
{
                 (void) sscanf(yytext,"%d",&dummyint);
                 base.push_back(dummyint);
#ifdef VERBOSE
                 printf(" >%d<",base[vectcount]);
#endif
                 vectcount++;
                 BEGIN(baseC);}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 270 "parse_pp"
/* eat up whitespace */
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 272 "parse_pp"
{
#ifdef VERBOSE
		  printf("\n");
#endif
		  if(*yytext=='#') while((c=yyinput())!='\n' && c!=EOF);
                  linecount++;
	          BEGIN(baseC);
                }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 281 "parse_pp"
{
                  yyless(0);
	          Nbase=vectcount;
                  BEGIN(INITIAL);
                  //   printf("Syntax error 1 at line %d!\nAborting...\n",linecount);
                  //   exit(1);/* error in var assignment */
		}
	YY_BREAK

/*---- which_nucl --------*/
case 41:
YY_RULE_SETUP
#line 290 "parse_pp"
{
#ifdef VERBOSE
		printf("reading vect: which_nucl(int)=");
#endif
                vectcount=0;
                which_nucl.clear();
                BEGIN(which_nuclC);}
	YY_BREAK

case 42:
YY_RULE_SETUP
#line 298 "parse_pp"
{
                 (void) sscanf(yytext,"%d",&dummyint);
                 which_nucl.push_back(dummyint);
#ifdef VERBOSE
                 printf(" >%d<",which_nucl[vectcount]);
#endif
                 vectcount++;
                 BEGIN(which_nuclC);}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 307 "parse_pp"
/* eat up whitespace */
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 309 "parse_pp"
{
#ifdef VERBOSE
		  printf("\n");
#endif
		  if(*yytext=='#') while((c=yyinput())!='\n' && c!=EOF);
                  linecount++;
	          BEGIN(which_nuclC);
                }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 318 "parse_pp"
{
                  yyless(0);
	          Nwhich_nucl=vectcount;
                  BEGIN(INITIAL);
                  //   printf("Syntax error 1 at line %d!\nAborting...\n",linecount);
                  //   exit(1);/* error in var assignment */
		}
	YY_BREAK

/*---- pulse_dur --------*/
case 46:
YY_RULE_SETUP
#line 327 "parse_pp"
{
#ifdef VERBOSE
		printf("reading vect: pulse_dur(float)=");
#endif
                vectcount=0;
                pulse_dur.clear();
                BEGIN(pulse_durC);}
	YY_BREAK

case 47:
YY_RULE_SETUP
#line 335 "parse_pp"
{
                 (void) sscanf(yytext,"%g",&dummyfloat);
                 pulse_dur.push_back(dummyfloat);
#ifdef VERBOSE
                 printf(" >%g<",pulse_dur[vectcount]);
#endif
                 vectcount++;
                 BEGIN(pulse_durC);}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 344 "parse_pp"
/* eat up whitespace */
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 346 "parse_pp"
{
#ifdef VERBOSE
		  printf("\n");
#endif
		  if(*yytext=='#') while((c=yyinput())!='\n' && c!=EOF);
                  linecount++;
	          BEGIN(pulse_durC);
                }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 355 "parse_pp"
{
                  yyless(0);
	          Npulse_dur=vectcount;
                  BEGIN(INITIAL);
                  //   printf("Syntax error 1 at line %d!\nAborting...\n",linecount);
                  //   exit(1);/* error in var assignment */
		}
	YY_BREAK

/*---- COGwdg --------*/
case 51:
YY_RULE_SETUP
#line 364 "parse_pp"
{
#ifdef VERBOSE
		printf("reading vect: COGwdg(int)=");
#endif
                vectcount=0;
                COGwdg.clear();
                BEGIN(COGwdgC);}
	YY_BREAK

case 52:
YY_RULE_SETUP
#line 372 "parse_pp"
{
                 (void) sscanf(yytext,"%d",&dummyint);
                 COGwdg.push_back(dummyint);
#ifdef VERBOSE
                 printf(" >%d<",COGwdg[vectcount]);
#endif
                 vectcount++;
                 BEGIN(COGwdgC);}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 381 "parse_pp"
/* eat up whitespace */
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 383 "parse_pp"
{
#ifdef VERBOSE
		  printf("\n");
#endif
		  if(*yytext=='#') while((c=yyinput())!='\n' && c!=EOF);
                  linecount++;
	          BEGIN(COGwdgC);
                }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 392 "parse_pp"
{
                  yyless(0);
	          NCOGwdg=vectcount;
                  BEGIN(INITIAL);
                  //   printf("Syntax error 1 at line %d!\nAborting...\n",linecount);
                  //   exit(1);/* error in var assignment */
		}
	YY_BREAK

/*****************************************/
/*******  reading in vectors of vectors ********/
/********************************************/
/*---- ph --------*/
case 56:
YY_RULE_SETUP
#line 407 "parse_pp"
{
#ifdef VERBOSE
		printf("reading list<vect>: ph(int)=");
#endif
                vectcount=0;
	        dummyvecint.clear();
                BEGIN(phC);}
	YY_BREAK

case 57:
YY_RULE_SETUP
#line 415 "parse_pp"
{
                 (void) sscanf(yytext,"%d",&dummyint);
                 dummyvecint.push_back(dummyint);	
#ifdef VERBOSE
                 printf(" >%d<",dummyvecint[vectcount]);
#endif
                 vectcount++;
                 BEGIN(phC);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 424 "parse_pp"
/* eat up whitespace */
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 426 "parse_pp"
{
#ifdef VERBOSE
		  printf("\n");
#endif
		  if(*yytext=='#') while((c=yyinput())!='\n' && c!=EOF);
                  linecount++;
	          BEGIN(phC);
                }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 435 "parse_pp"
{
                  yyless(0);
                  if (vectcount>Nph) {
	                  Nph=vectcount;
                  }
	          ph.push_back(dummyvecint);
                  BEGIN(INITIAL);
                  //   printf("Syntax error 1 at line %d!\nAborting...\n",linecount);
                  //   exit(1);/* error in var assignment */
		}
	YY_BREAK

/*---- COGpw --------*/
case 61:
YY_RULE_SETUP
#line 447 "parse_pp"
{
#ifdef VERBOSE
		printf("reading list<vect>: COGpw(int)=");
#endif
                vectcount=0;
	        dummyvecint.clear();
                BEGIN(COGpwC);}
	YY_BREAK

case 62:
YY_RULE_SETUP
#line 455 "parse_pp"
{
                 (void) sscanf(yytext,"%d",&dummyint);
                 dummyvecint.push_back(dummyint);	
#ifdef VERBOSE
                 printf(" >%d<",dummyvecint[vectcount]);
#endif
                 vectcount++;
                 BEGIN(COGpwC);}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 464 "parse_pp"
/* eat up whitespace */
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 466 "parse_pp"
{
#ifdef VERBOSE
		  printf("\n");
#endif
		  if(*yytext=='#') while((c=yyinput())!='\n' && c!=EOF);
                  linecount++;
	          BEGIN(COGpwC);
                }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 475 "parse_pp"
{
                  yyless(0);
                  if (vectcount>NCOGpw) {
	                  NCOGpw=vectcount;
                  }
	          COGpw.push_back(dummyvecint);
                  BEGIN(INITIAL);
                  //   printf("Syntax error 1 at line %d!\nAborting...\n",linecount);
                  //   exit(1);/* error in var assignment */
		}
	YY_BREAK

/*****************************************/
/*******  reading in lists of matrices ********/
/********************************************/
/*---- attn --------*/
case 66:
YY_RULE_SETUP
#line 493 "parse_pp"
{
#ifdef VERBOSE
                printf("reading list<mtx>: attn(float)=");
#endif
                vectcount=0;
	        dummyvecfloat.clear();
                dummymtxfloatattn.clear();
	        Nattn=0;	
                BEGIN(attnC);}
	YY_BREAK

case 67:
YY_RULE_SETUP
#line 503 "parse_pp"
{
                 (void) sscanf(yytext,"%g",&dummyfloat);
                 dummyvecfloat.push_back(dummyfloat);
#ifdef VERBOSE	
                 printf(" >%g<",dummyvecfloat[vectcount]);
#endif
                 vectcount++;
                 BEGIN(attnC);}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 512 "parse_pp"
/* eat up whitespace */
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 516 "parse_pp"
{
	        if (vectcount==0) linecount++;
                else {
                  if (dummymtxfloatattn.size()>0 && vectcount!=Nattn) {
	                  printf("Matrix attn %d contains lines of unequal length, line %d, %d %d %d!\nAborting...\n",attn.size()+1,linecount,dummymtxfloatattn.size(),vectcount, Nattn);
                          exit(1);/* error in var assignment */
	          }
	          else {
                     Nattn=vectcount;
                  }
	          dummymtxfloatattn.push_back(dummyvecfloat);
	          dummyvecfloat.clear();
	          vectcount=0;
                  linecount++;
		  BEGIN(attnC);
                }
             }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 534 "parse_pp"
{ 
 /*                  if(*yytext=='#') {
                        while((c=yyinput())!='\n' && c!=EOF);
                        linecount++;
 	               BEGIN(attnC);
                   } else {
 */
                        yyless(0);
	                attn.push_back(dummymtxfloatattn);
#ifdef VERBOSE
			printf("\n");
#endif
                        BEGIN(INITIAL);
                       //   printf("Syntax error 1 at line %d!\nAborting...\n",linecount);
                       //   exit(1);/* error in var assignment */
 /*                  }*/
		}
	YY_BREAK

/*********************************/
/*******  Other rules ************/
/*********************************/
case 71:
YY_RULE_SETUP
#line 558 "parse_pp"
{printf("Syntax error 2 at line %d!  >%s< \nAborting...\n",linecount,yytext);
         exit(1);}
	YY_BREAK
/*********************************/
/*******  EOF rules  *************/
/*********************************/
/*****  check if all vars and vects were assigned  ****/
case 72:
YY_RULE_SETUP
#line 567 "parse_pp"
ECHO;
	YY_BREAK
#line 1642 "parse.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(cutoffC):
case YY_STATE_EOF(maxjumpC):
case YY_STATE_EOF(maxcohC):
case YY_STATE_EOF(COGmax_pwC):
case YY_STATE_EOF(COGmax_NC):
case YY_STATE_EOF(COGNC):
case YY_STATE_EOF(COGmin_NC):
case YY_STATE_EOF(COGinc_NC):
case YY_STATE_EOF(rangeC):
case YY_STATE_EOF(baseC):
case YY_STATE_EOF(which_nuclC):
case YY_STATE_EOF(pulse_durC):
case YY_STATE_EOF(COGwdgC):
case YY_STATE_EOF(phC):
case YY_STATE_EOF(COGpwC):
case YY_STATE_EOF(attnC):
case YY_STATE_EOF(fnameC):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 392 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 392 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 391);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 567 "parse_pp"
